/*
 * !++
 * QDS - Quick Data Signalling Library
 * !-
 * Copyright (C) 2002 - 2018 Devexperts LLC
 * !-
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 * !__
 */
package com.dxfeed.event.misc;

import java.util.*;

import com.devexperts.qd.*;
import com.devexperts.qd.ng.RecordMapping;
import com.devexperts.qd.ng.RecordMappingFactory;
import com.devexperts.services.ServiceProvider;
import com.dxfeed.api.impl.*;
import com.dxfeed.event.misc.impl.ConfigurationMapping;
import com.dxfeed.event.misc.impl.MessageMapping;

@ServiceProvider(order = -50)
public final class MiscFactoryImpl extends EventDelegateFactory implements RecordMappingFactory {
// BEGIN: CODE AUTOMATICALLY GENERATED: DO NOT MODIFY. IT IS REGENERATED BY com.dxfeed.api.codegen.ImplCodeGen
	@Override
	public void buildScheme(SchemeBuilder builder) {
		builder.addRequiredField("Message", "Message", SerialFieldType.SERIAL_OBJECT);

		builder.addOptionalField("Configuration", "Version", SerialFieldType.COMPACT_INT, "Configuration", "Version", true);
		builder.addRequiredField("Configuration", "Configuration", SerialFieldType.SERIAL_OBJECT);
	}

	@Override
	public Collection<EventDelegate<?>> createDelegates(DataRecord record) {
		Collection<EventDelegate<?>> result = new ArrayList<>();
		if (record.getMapping(MessageMapping.class) != null) {
			result.add(new MessageDelegate(record, QDContract.STREAM, EnumSet.of(EventDelegateFlags.SUB, EventDelegateFlags.PUB, EventDelegateFlags.WILDCARD)));
		} else if (record.getMapping(ConfigurationMapping.class) != null) {
			result.add(new ConfigurationDelegate(record, QDContract.TICKER, EnumSet.of(EventDelegateFlags.SUB, EventDelegateFlags.PUB)));
			result.add(new ConfigurationDelegate(record, QDContract.STREAM, EnumSet.of(EventDelegateFlags.PUB, EventDelegateFlags.WILDCARD)));
		}
		return result;
	}

	@Override
	public Collection<EventDelegate<?>> createStreamOnlyDelegates(DataRecord record) {
		Collection<EventDelegate<?>> result = new ArrayList<>();
		if (record.getMapping(MessageMapping.class) != null) {
			result.add(new MessageDelegate(record, QDContract.STREAM, EnumSet.of(EventDelegateFlags.SUB, EventDelegateFlags.PUB, EventDelegateFlags.WILDCARD)));
		} else if (record.getMapping(ConfigurationMapping.class) != null) {
			result.add(new ConfigurationDelegate(record, QDContract.STREAM, EnumSet.of(EventDelegateFlags.SUB, EventDelegateFlags.PUB, EventDelegateFlags.WILDCARD)));
		}
		return result;
	}

	@Override
	public RecordMapping createMapping(DataRecord record) {
		String baseRecordName = getBaseRecordName(record.getName());
		if (baseRecordName.equals("Message"))
			return new MessageMapping(record);
		if (baseRecordName.equals("Configuration"))
			return new ConfigurationMapping(record);
		return null;
	}
// END: CODE AUTOMATICALLY GENERATED
}
